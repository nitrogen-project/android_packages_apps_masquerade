package masquerade.substratum.util;

import android.content.Intent;
import android.os.AsyncTask;
import android.os.Environment;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Nicholas Chum (nicholaschum)
 */

public class Uninstaller {

    private Intent mIntent;
    private String uninstallString;
    private boolean specific;
    private boolean restartSystemUI;

    public void Uninstaller(Intent mIntent, String uninstallString,
                            boolean specific, boolean restartSystemUI) {
        this.mIntent = mIntent;
        this.uninstallString = uninstallString;
        this.specific = specific;
        this.restartSystemUI = restartSystemUI;
        new UninstallAsync().execute("");
    }

    private class UninstallAsync extends AsyncTask<String, Integer, String> {

        @Override
        protected String doInBackground(String... sUrl) {
            uninstall_handler(mIntent, uninstallString, specific, restartSystemUI);
            return null;
        }

        private void uninstall_handler(Intent intent, String inheritor,
                                       boolean specific, boolean restartSystemUI) {
            try {
                String final_commands_disable = "";
                String final_commands_uninstall = "";

                Root.runCommand(
                        "pm grant masquerade.substratum android.permission.READ_EXTERNAL_STORAGE");
                Root.runCommand(
                        "pm grant masquerade.substratum android.permission.WRITE_EXTERNAL_STORAGE");

                ArrayList<String> packages_to_uninstall =
                        new ArrayList<>(intent.getStringArrayListExtra(inheritor));
                String[] state5initial = {Environment.getExternalStorageDirectory()
                        .getAbsolutePath() +
                        "/.substratum/current_overlays.xml", "5"};
                List<String> state5overlays = ReadOverlaysFile.main(state5initial);

                for (int i = 0; i < packages_to_uninstall.size(); i++) {
                    String current = packages_to_uninstall.get(i);

                    Log.d("Masquerade", "Intent received to purge referendum package file \"" +
                            current + "\"");
                    if (state5overlays.contains(packages_to_uninstall.get(i))) {
                        Log.d("Masquerade", "Package file \"" + current +
                                "\" requires an overlay disable prior to uninstall...");
                        if (final_commands_disable.length() == 0) {
                            final_commands_disable = "om disable " + current;
                        } else {
                            final_commands_disable = final_commands_disable + " " + current;
                        }

                        if (final_commands_uninstall.length() == 0) {
                            final_commands_uninstall = "pm uninstall " + current;
                        } else {
                            final_commands_uninstall = final_commands_uninstall +
                                    " && pm uninstall " + current;
                        }
                    } else {
                        Log.d("Masquerade", "\"" + current +
                                "\" has been redirected to the package manager in " +
                                "preparations of removal...");
                        Root.runCommand("pm uninstall " + current);
                    }
                }

                if (final_commands_disable.length() > 0) {
                    Log.d("Masquerade", "Disable commands: " + final_commands_disable);
                    Root.runCommand(final_commands_disable);
                }
                if (final_commands_uninstall.length() > 0) {
                    Log.d("Masquerade", "Uninstall commands: " + final_commands_uninstall);
                    Root.runCommand(final_commands_uninstall);
                }

                if (restartSystemUI) {
                    Root.runCommand("pkill com.android.systemui");
                }

                if (!specific) {
                    // Clear the resource idmapping files generated by OMS
                    Log.d("Masquerade", "Cleaning up resource-cache directory...");
                    Root.runCommand("rm /data/resource-cache/*");
                    // Now clear the persistent overlays database
                    Log.d("Masquerade", "Finalizing clean up of persistent overlays database...");
                    Root.runCommand("rm -rf /data/system/overlays.xml");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
